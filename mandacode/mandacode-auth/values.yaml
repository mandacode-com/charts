core:
  replicaCount: 1

  image:
    repository: registry.mandacode.com/mandacode/auth/auth-core
    pullPolicy: IfNotPresent
    tag: "0.1.13"

  imagePullSecrets:
    - name: regcred

  nameOverride: ""
  fullnameOverride: ""

  serviceAccount:
    create: true
    automount: true
    annotations: {}
    name: ""

  podAnnotations: {}
  podLabels: {}

  podSecurityContext: {}

  securityContext: {}

  service:
    type: ClusterIP
    port: 80
    targetPort: 3000

  resources: {}

  livenessProbe:
    httpGet:
      path: /health
      port: 3000
  readinessProbe:
    httpGet:
      path: /health
      port: 3000

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  volumes: []

  volumeMounts: []

  nodeSelector: {}

  tolerations: []

  affinity: {}

  cors:
    origin: "https://auth.mandacode.com"

  cookie:
    secretName: ""
    secret: ""
    domain: "mandacode.com"

  auth:
    verifyEmailUrl: "https://auth.mandacode.com/auth/local/verify-email"

  oauth:
    existingSecret: ""
    google:
      endpoints:
        token: "https://oauth2.googleapis.com/token"
        profile: "https://www.googleapis.com/oauth2/v3/userinfo"
        auth: "https://accounts.google.com/o/oauth2/v2/auth"
      grantType: "authorization_code"
      clientId: ""
      clientSecret: ""
      redirectUris:
        web: "https://auth.mandacode.com/api/core/auth/oauth/google/callback"
        mobile: "https://auth.mandacode.com/api/core/m/auth/oauth/google/callback"
    kakao:
      endpoints:
        token: "https://kauth.kakao.com/oauth/token"
        profile: "https://kapi.kakao.com/v2/user/me"
        auth: "https://kauth.kakao.com/oauth/authorize"
      grantType: "authorization_code"
      clientId: ""
      clientSecret: ""
      redirectUris:
        web: "https://auth.mandacode.com/api/core/auth/oauth/kakao/callback"
        mobile: "https://auth.mandacode.com/api/core/m/auth/oauth/kakao/callback"
    naver:
      endpoints:
        token: "https://nid.naver.com/oauth2.0/token"
        profile: "https://openapi.naver.com/v1/nid/me"
        auth: "https://nid.naver.com/oauth2.0/authorize"
      grantType: "authorization_code"
      clientId: ""
      clientSecret: ""
      redirectUris:
        web: "https://auth.mandacode.com/api/core/auth/oauth/naver/callback"
        mobile: "https://auth.mandacode.com/api/core/m/auth/oauth/naver/callback"

  eventBus:
    client:
      clientId: "auth.auth-core"
      brokers: ""
    consumer:
      groupId: "auth.auth-core"
    dlt:
      retry:
        maxAttempts: 3
        delay: 1000

tokenService:
  host: "token-service"
  port: 50051

  replicaCount: 1

  image:
    repository: registry.mandacode.com/mandacode/auth/token-service
    pullPolicy: IfNotPresent
    tag: "0.1.0-rc1"

  imagePullSecrets:
    - name: regcred
  nameOverride: ""
  fullnameOverride: ""

  serviceAccount:
    create: true
    automount: true
    annotations: {}
    name: ""

  podAnnotations: {}
  podLabels: {}

  podSecurityContext: {}

  securityContext: {}
  service:
    type: ClusterIP
    port: 50051
    targetPort: 3000

  resources: {}
  livenessProbe:
    exec:
      command:
        - /bin/grpc_health_probe
        - -addr=:3000

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80

  volumes: []
  volumeMounts: []
  nodeSelector: {}
  tolerations: []
  affinity: {}

  # Token Service JWT settings
  jwt:
    access:
      secretName: ""
      expiresIn: "15m"
    refresh:
      secretName: ""
      expiresIn: "7d"
    emailVerification:
      secretName: ""
      expiresIn: "1d"

session:
  name: "SID"
  timeout: 86400
  storage:
    type: "internal"
    existingSecret: ""
    internal:
      image: "redis:latest"
      host: "test-redis"
      port: 6379
      auth:
        password: "password"
    external:
      host: ""
      port: 6379
      auth:
        password: ""

mailerService:
  host: "mailer"
  port: 50051
  minDelay: '1m'

database:
  type: "internal"
  existingSecret: ""
  external:
    host: ""
    port: 5432
    database: "auth"
    auth:
      username: ""
      password: ""
  internal:
    image: "postgres:latest"
    host: "test-postgres"
    port: 5432
    database: "auth"
    auth:
      username: "postgres"
      password: "password"

# AUTO-MAILER
mailer:
  enabled: false
