core:
  replicaCount: 1

  image:
    repository: registry.mandacode.com/tarot/tarot-core
    pullPolicy: IfNotPresent
    tag: "0.0.1"
    port: 3000

  imagePullSecrets:
    - name: regcred

  nameOverride: ""
  fullnameOverride: ""

  serviceAccount:
    create: true
    automount: true
    annotations: {}
    name: ""

  podAnnotations: {}
  podLabels: {}

  podSecurityContext:
    {}
    # fsGroup: 2000

  securityContext: {}

  service:
    type: ClusterIP
    port: 80
    targetPort: 3000

  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
  livenessProbe:
    httpGet:
      path: /health
      port: 3000
  readinessProbe:
    httpGet:
      path: /health
      port: 3000

  # This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  # Additional volumes on the output Deployment definition.
  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # Additional volumeMounts on the output Deployment definition.
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

  nodeSelector: {}

  tolerations: []

  affinity: {}

  config:
    app:
      configMapName: tarot-config

  nodeEnv: "production"
  openai:
    apiKey: ""
    system_message:
      today: ""
      rommance: ""
      monthlyStudy: ""

gateway:
  existingSecret: ""
  jwtSecret: ""
  jwtHeader: "x-gateway-jwt"

database:
  type: "internal" # internal or external
  existingSecret: ""
  internal:
    image: "postgres:latest"
    host: test-postgres
    port: 5432
    database: tarot
    auth:
      username: tarot-app-user
      password: tarot-app-password
  external:
    host: tarot-postgres
    port: 5432
    database: tarot
    auth:
      username: tarot-app-user
      password: tarot-app-password
